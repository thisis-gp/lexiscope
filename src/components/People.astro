<script>
  import Peep, {
    normalWalk,
    removeRandomFromArray,
    getRandomFromArray,
    resetPeep,
    removeItemFromArray
  } from 'src/utils/peep'
  import { host } from 'src/utils'
  import gsap from 'gsap'
  console.log(import.meta)
  const image = new URL('/assets/pics/open-peeps-sheet.png', host())
  const config = {
    src: image.href,
    rows: 15,
    cols: 7
  }
  const walks = [normalWalk]
  const img = document.createElement('img')
  img.onload = init
  img.src = config.src

  const canvas = document.querySelector('#people') as HTMLCanvasElement
  const ctx = canvas.getContext('2d')

  const stage = {
    width: 0,
    height: 0
  }

  const allPeeps = []
  const availablePeeps = []
  const crowd = []

  function init() {
    createPeeps()

    // resize also (re)populates the stage
    resize()

    gsap.ticker.add(render)
    window.addEventListener('resize', resize)
  }

  function createPeeps() {
    const { rows, cols } = config
    const { naturalWidth: width, naturalHeight: height } = img
    const total = rows * cols
    const rectWidth = width / rows
    const rectHeight = height / cols

    for (let i = 0; i < total; i++) {
      allPeeps.push(
        new Peep({
          image: img,
          rect: [
            (i % rows) * rectWidth,
            ((i / rows) | 0) * rectHeight,
            rectWidth,
            rectHeight
          ]
        })
      )
    }
  }

  function resize() {
    stage.width = canvas.clientWidth
    stage.height = canvas.clientHeight
    canvas.width = stage.width * devicePixelRatio
    canvas.height = stage.height * devicePixelRatio

    crowd.forEach((peep) => {
      peep.walk.kill()
    })

    crowd.length = 0
    availablePeeps.length = 0
    availablePeeps.push(...allPeeps)

    initCrowd()
  }

  function initCrowd() {
    while (availablePeeps.length) {
      // setting random tween progress spreads the peeps out
      addPeepToCrowd().walk.progress(Math.random())
    }
  }

  function addPeepToCrowd() {
    const peep = removeRandomFromArray(availablePeeps)
    const walk = getRandomFromArray(walks)({
      peep,
      props: resetPeep({
        peep,
        stage
      })
    }).eventCallback('onComplete', () => {
      removePeepFromCrowd(peep)
      addPeepToCrowd()
    })

    peep.walk = walk

    crowd.push(peep)
    crowd.sort((a, b) => a.anchorY - b.anchorY)

    return peep
  }

  function removePeepFromCrowd(peep) {
    removeItemFromArray(crowd, peep)
    availablePeeps.push(peep)
  }

  function render() {
    canvas.width = canvas.width
    ctx.save()
    ctx.scale(devicePixelRatio, devicePixelRatio)

    crowd.forEach((peep) => {
      peep.render(ctx)
    })

    ctx.restore()
  }
</script>

<style>
  @tailwind base;
  #people {
    height: calc(100vh - 136px);
  }

  @media (min-width: 768px) {
    #people {
      height: calc(100vh - theme('spacing.20'));
    }
  }
</style>

<canvas id="people" class="absolute w-full -z-10"></canvas>
